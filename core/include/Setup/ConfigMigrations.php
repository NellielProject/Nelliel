<?php
declare(strict_types = 1);

namespace Nelliel\Setup;

defined('NELLIEL_VERSION') or die('NOPE.AVI');

use Nelliel\Utility\FileHandler;

class ConfigMigrations
{
    private $file_handler;
    private $upgrade;

    function __construct(FileHandler $file_handler, Upgrade $upgrade)
    {
        $this->file_handler = $file_handler;
        $this->upgrade = $upgrade;
    }

    // NOTES
    public function doMigrations(): int
    {
        $migration_count = 0;

        if (version_compare($this->upgrade->installedVersion(), 'v0.9.31', '<')) {
            echo '<br>' . __('Updating config for v0.9.31') . '<br>';

            // Update config files
            $base_config = array();
            $db_config = array();
            $crypt_config = array();

            include NEL_CONFIG_FILES_PATH . 'config.php';

            // Technical
            $technical_config = array();
            $technical_config['secure_session_only'] = boolval($base_config['secure_session_only'] ?? false);
            $technical_config['directory_perm'] = strval($base_config['directory_perm'] ?? '0755');
            $technical_config['file_perm'] = strval($base_config['file_perm'] ?? '0644');
            $technical_config['enable_plugins'] = boolval($base_config['enable_plugins'] ?? true);
            $technical_config['enable_json_api'] = boolval($base_config['enable_json_api'] ?? true);
            $technical_config['use_mustache_cache'] = boolval($base_config['use_mustache_cache'] ?? true);
            $technical_config['use_file_cache'] = boolval($base_config['use_file_cache'] ?? true);
            $technical_config['use_render_cache'] = boolval($base_config['use_render_cache'] ?? true);

            $prepend = "\n" . '// Technical config generated by Nelliel upgrade';
            $this->file_handler->writeInternalFile(NEL_CONFIG_FILES_PATH . 'technical.php',
                $prepend . "\n" . nel_config_var_export($technical_config, '$technical_config'), true);

            // Databases
            $main_db_config = $db_config;

            $additional_db_config = array();

            if (file_exists(NEL_CONFIG_FILES_PATH . 'additional_databases.php')) {
                include NEL_CONFIG_FILES_PATH . 'additional_databases.php';
                $additional_db_config = $db_config;
            }

            $updated_db_config = $main_db_config + $additional_db_config;

            foreach ($db_config as $key => $config) {
                foreach ($config as $type => $type_config) {
                    if ($type === 'sqltype' || $type === 'timeout') {
                        continue;
                    }

                    $updated_db_config[$key][$type]['timeout'] = intval($type_config['timeout'] ?? 30);
                }

                unset($updated_db_config[$key]['timeout']);
            }

            $prepend = "\n" . '// Database config generated by Nelliel upgrade';
            $append = "\n\n" . '// Additional databases can be added below' . "\n";
            $this->file_handler->writeInternalFile(NEL_CONFIG_FILES_PATH . 'databases.php',
                $prepend . "\n" . nel_config_var_export($updated_db_config, '$db_config') . $append, true);

            // Hashing
            $updated_crypt_config['account_password_algorithm'] = strval(
                $crypt_config['password_algorithm'] ?? 'BCRYPT');
            $updated_crypt_config['account_password_bcrypt_cost'] = intval($crypt_config['password_bcrypt_cost'] ?? 12);
            $updated_crypt_config['account_password_argon2_memory_cost'] = intval(
                $crypt_config['password_argon2_memory_cost'] ?? 1024);
            $updated_crypt_config['account_password_argon2_time_cost'] = intval(
                $crypt_config['password_argon2_time_cost'] ?? 2);
            $updated_crypt_config['account_password_argon2_threads'] = intval(
                $crypt_config['password_argon2_threads'] ?? 2);
            $updated_crypt_config['account_password_max_length'] = 256;
            $updated_crypt_config['post_password_strong_hashing'] = false;
            $updated_crypt_config['post_password_strong_algorithm'] = 'BCRYPT';
            $updated_crypt_config['post_password_strong_bcrypt_cost'] = 8;
            $updated_crypt_config['post_password_max_length'] = 256;
            $updated_crypt_config['ip_strong_hashing'] = false;
            $updated_crypt_config['ip_strong_algorithm'] = 'BCRYPT';
            $updated_crypt_config['ip_strong_bcrypt_cost'] = 8;

            $prepend = "\n" . '// Hashing config generated by Nelliel upgrade';
            $this->file_handler->writeInternalFile(NEL_CONFIG_FILES_PATH . 'crypt.php',
                $prepend . "\n" . nel_config_var_export($updated_crypt_config, '$crypt_config'), true);

            echo ' - ' . __('Configuration updated.') . '<br>';

            $migration_count ++;
        }

        if (version_compare($this->upgrade->installedVersion(), 'v0.9.32', '<')) {
            echo '<br>' . __('Updating config for v0.9.32') . '<br>';

            // Technical
            $technical_config = array();
            include NEL_CONFIG_FILES_PATH . 'technical.php';
            $technical_config['debug_mode'] = false;

            $prepend = "\n" . '// Technical config generated by Nelliel upgrade';
            $this->file_handler->writeInternalFile(NEL_CONFIG_FILES_PATH . 'technical.php',
                $prepend . "\n" . nel_config_var_export($technical_config, '$technical_config'), true);

            $migration_count ++;
        }

        return $migration_count;
    }
}